7d6
< import numpy as np
129,130c128,139
<     def comproducti(self, steadystate=False):
<         # Compute steady state productivity
---
>     def comproducti(self, tol=99999):
>         """
>             Computes steady state productivity.
>             Argument:
>                 tol = 'epsilon' value to check the maximum absolute value of
>                       floating species concentration among all species in the
>                       model against to determine if the system has reached
>                       steady state or not
> 
>                       If the system has not reached steady state, this function
>                       will return -1e-4 instead of the productivity value.
>         """
135,142c144,150
<         ff = abs(rr.model.getFloatingSpeciesConcentrationRates())[:-2]
<         st = max(ff)
<         ii = np.where(ff==st)
<         sp = rr.model.getFloatingSpeciesIds()[ii[0][0]]
<         if steadystate == True:
<             if st > 1e-8:
<                 print("st = ", st, "(", sp, ")")
<             return st
---
>         # -2: removes GROWTH and CITRA from the list because they aren't steady
>         # state anyway
>         st = max(abs(rr.model.getFloatingSpeciesConcentrationRates())[:-2])
>         if st < tol:
>             Y_PS = (result[-1,selection.index("CITRA")]*mmCITRA)/(self.getFEED()*self.timef*mmGLC)
>             mu = result[-1,selection.index("iGROWTH'")]*3600
>             return mu*Y_PS
144,150c152,202
<             print("st = ", st)
<             if st < 1e-8:
<                 Y_PS = (result[-1,selection.index("CITRA")]*mmCITRA)/(self.getFEED()*self.timef*mmGLC)
<                 mu = result[-1,selection.index("iGROWTH'")]*3600
<                 return mu*Y_PS
<             else:
<                 return -1e-4
---
>             return -1e-4
>             
>     def comflux(self, tol=99999):
>         """
>             Computes steady state flux of citramalate synthesis reaction.
>             Argument:
>                 tol = 'epsilon' value to check the maximum absolute value of
>                       floating species concentration among all species in the
>                       model against to determine if the system has reached
>                       steady state or not
> 
>                       If the system has not reached steady state, this function
>                       will return -1e-4 instead of the productivity value.
>         """
>         rr = roadrunner.RoadRunner(libsbml.writeSBMLToString(self.document))
>        # rr.timeCourseSelections = selection
>         result = rr.simulate(self.time0, self.timef, self.npoints)
>         # -2: removes GROWTH and CITRA from the list because they aren't steady
>         # state anyway
>         st = max(abs(rr.model.getFloatingSpeciesConcentrationRates())[:-2])
>         if st < tol:
>             return rr.model.getReactionRates()[68] # CITRA_SYN is reaction No.69
>         else:
>             return -1e-4
> 
>     def compsteady(self):
>         """
>             Computes maximum absoute value of floating species concentration
>             among all species in the model - useful in checking if system has
>             reached steady state or not
>         """
>         selection = ["CITRA", "iGROWTH'"]
>         rr = roadrunner.RoadRunner(libsbml.writeSBMLToString(self.document))
>         rr.timeCourseSelections = selection
>         result = rr.simulate(self.time0, self.timef, self.npoints)
>         # -2: removes GROWTH and CITRA from the list because they aren't steady
>         # state anyway
>         st = max(abs(rr.model.getFloatingSpeciesConcentrationRates())[:-2])
>         return st
> 
>     def plot(self, species):
>         """
>             Plots concentration of specified species over time course specified
>             Input can also be any other SBML value that can be selected in
>             RoadRunner.
>         """
>         rr = roadrunner.RoadRunner(libsbml.writeSBMLToString(self.document))
>         rr.timeCourseSelections = [species]
>         result = rr.simulate(self.time0, self.timef, self.npoints)
>         plt.plot(result[:,result.colnames.index(species)])
>         plt.show()
